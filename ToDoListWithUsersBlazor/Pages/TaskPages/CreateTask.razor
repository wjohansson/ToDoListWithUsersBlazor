@page "/create-task"

@inject TaskServiceUi taskService
@using System.Text;
@using System.Text.Json;
@using DataLibrary.Enums;
@using DataLibrary.Models;
@using ToDoListWithUsersBlazor.Services;
@inject NavigationManager navigationManager

<p class="text-danger">@errorMessage</p>
<EditForm Model="@newTask" OnValidSubmit="@Create">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <div class="form-group col">
            <InputText placeholder="Title..." id="title" @bind-Value="newTask.Title" class="form-control" />
            <ValidationMessage For="@(() => newTask.Title)" />
        </div>

        
        <div class="form-group col">
            <InputSelect id="priority" @bind-Value="newTask.Priority" class="form-control">
                <option value="">Priority...</option>
                @foreach (var sort in Enum.GetValues(typeof(Priority)))
                {
                    <option value="@sort">@sort</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => newTask.Priority)" />
        </div>
    </div>

    <br />

    <div class="form-group row">
        <div class="form-group col">
            <InputText placeholder="Description..." id="description" @bind-Value="newTask.Description" class="form-control" />
            <ValidationMessage For="@(() => newTask.Description)" />
        </div>
    </div>

    <br />

    <div class="form-group row">
        <div class="form-group col">
            <button type="submit" class="btn btn-success oi oi-plus" style="height: 40px; width: 40px"></button>
            <button type="reset" class="btn btn-outline-danger oi oi-x" style="height: 40px; width: 40px"></button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback<List<TaskListModel>> OnTaskCreated { get; set; }

    private TaskModel newTask { get; set; } = new();
    private string errorMessage { get; set; } = "";


    public async Task Create()
    {
        try
        {
            await taskService.CreateTask(newTask);
            errorMessage = "";
        }
        catch (Exception)
        {
            errorMessage = "Task already exists in this list.";
            return;
        }
        newTask = new();
        await OnTaskCreated.InvokeAsync();
    }

}
