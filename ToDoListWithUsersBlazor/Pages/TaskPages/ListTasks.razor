@using DataLibrary.Enums;
@using DataLibrary.Models;
@using ToDoListWithUsersBlazor.Pages.SubTaskPages
@using ToDoListWithUsersBlazor.Services;
@inject TaskServiceUi taskService
@inject SubTaskServiceUi subTaskService
@inject TaskListServiceUi listService
@inject NavigationManager navigationManager;

@if (Tasks != null)
{
    <div class="mt-3">
        @if (Tasks.Count == 0)
        {
            <ul>
                <li>No tasks</li>
            </ul>
        }
        else
        {
            <div class="d-flex flex-wrap flex-column gap-2">
                <Virtualize Context="task" Items="Tasks">
                    <div class="d-flex align-self-center w-75">
                        <div class="form-check mt-4">
                            @if (task.Completed)
                            {
                                <input type="checkbox" @onclick="@(() => ToggleComplete(task))" @onclick:preventDefault class="form-check-input bg-opacity-75 bg-black align-self-center" style="width: 40px; height: 40px;" checked></input>
                            }
                            else
                            {
                                <input type="checkbox" @onclick="@(() => ToggleComplete(task))" @onclick:preventDefault class="form-check-input bg-opacity-75  align-self-center" style="width: 40px; height: 40px;"></input>
                            }
                        </div>

                        <div class="text-white p-2 mx-2 border-5 rounded-3 task d-flex flex-column flex-wrap justify-content-between @((CheckOpacity(task)) ? "opacity-25" : "opacity-100")" style="min-height: 90px; width: 90%">

                            @if ((!confirmEditTask && !confirmDeleteTask) || task.Id != tempTask.Id)
                            {
                                <div class="d-flex w-100 gap-2">
                                    @if (expandedTasks.Any(x => x == task.Id))
                                    {
                                        <button @onpointerdown="@(() => ToggleExpandTask(task))" class="oi oi-chevron-bottom btn btn-light bg-transparent text-white border-0 align-self-center" style="height: 50px; width: 50px;"></button>
                                    }
                                    else
                                    {
                                        <button @onpointerdown="@(() => ToggleExpandTask(task))" class="oi oi-chevron-right btn btn-light bg-transparent text-white border-0" style="height: 50px; width: 50px;"></button>
                                    }

                                    <div class="mb-0 h4 d-flex flex-column w-100">
                                        <div class="d-flex justify-content-between">
                                            <span class="h4 mb-0">@task?.Title.ToUpper()</span>
                                            <span class="h6 text-warning">@task?.Priority.Value</span>
                                        </div>

                                        <div class="d-flex justify-content-between">
                                            <span class="h6 opacity-75">@task?.Description</span>
                                            <span class="h6">Sub tasks: @task?.SubTasks.Count</span>
                                        </div>
                                    </div>
                                </div>
                                <hr class="bg-warning" />

                                @if (expandedTasks.Any(x => x == task.Id) && !confirmCreateSubTask)
                                {
                                    <div class="d-flex flex-column gap-2">
                                        <Virtualize Context="subTask" Items="@task?.SubTasks">
                                            <div class="h5 rounded-3 px-2 py-1 d-flex align-items-center justify-content-between w-100" style="background-color: rgb(75, 125, 125)">
                                                <div>
                                                    <span>@subTask.Title | </span>
                                                    <span class="h6 opacity-50">@subTask.Description</span>
                                                </div>
                                                <button @onclick="@(() => DeleteSubTask(subTask))" class="btn btn-outline-light oi oi-sm oi-x p-0" style="width: 30px; height: 25px;"></button>
                                            </div>
                                        </Virtualize>
                                    </div>
                                }
                                else if (expandedTasks.Any(x => x == task.Id) && confirmCreateSubTask)
                                {
                                    <CreateSubTask Task="@task" OnSubTaskCreated="@(() => SubTaskCreated(task))"></CreateSubTask>
                                }
                            }
                            else if (task.Id == tempTask.Id && confirmDeleteTask)
                            {
                                <div class="text-center mb-0">Are you sure?</div>
                                <hr class="bg-black mx-2 my-1" />
                                <div>
                                    <button @onclick="() => Delete(task)" class="btn btn-outline-success oi oi-check" style="height: 30px; width: calc(50% - 4px)"></button>
                                    <button type="reset" @onclick="() => ToggleDelete(task)" @onclick:preventDefault class="btn btn-outline-danger oi oi-x" style="height: 30px; width: calc(50% - 4px)"></button>
                                </div>
                            }
                            else if (task.Id == tempTask.Id && confirmEditTask)
                            {
                                <p class="text-danger">@editErrorMessage</p>
                                <EditForm Model="task" OnValidSubmit="() => Edit(task)">
                                    <DataAnnotationsValidator />
                                    <div class="form-group row">
                                        <div class="form-group col">
                                            <label for="title">Title</label>
                                            <InputText placeholder="Title..." id="title" @bind-Value="task.Title" class="form-control" />
                                            <ValidationMessage For="@(() => task.Title)" />
                                        </div>

                                        <div class="form-group col">
                                            <label for="priority">Priority</label>
                                            <InputSelect id="priority" @bind-Value="task.Priority" class="form-control">
                                                @foreach (var sort in Enum.GetValues(typeof(Priority)))
                                            {
                                                <option value="@sort">@sort</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => task.Priority)" />
                                    </div>
                                </div>

                                <br />

                                <div class="form-group row">
                                    <div class="form-group col">
                                        <label for="description">Description</label>
                                        <InputText placeholder="Description..." id="description" @bind-Value="task.Description" class="form-control" />
                                        <ValidationMessage For="@(() => task.Description)" />
                                    </div>
                                </div>

                                <div class="form-group row mt-2">
                                    <div class="form-group col">
                                        <button type="submit" class="btn btn-outline-success oi oi-pencil" style="height: 30px; width: calc(50% - 4px)"></button>
                                        <button type="reset" @onclick="() => ToggleEdit(task)" @onclick:preventDefault class="btn btn-outline-danger oi oi-x" style="height: 30px; width: calc(50% - 4px)"></button>
                                    </div>
                                </div>
                                <br />
                            </EditForm>
                            }
                        </div>
                        <div class="d-flex flex-column gap-2">
                            <button @onclick="() => ToggleEdit(task)" class="btn btn-secondary oi oi-pencil" style="height: 40px; width: 40px"></button>
                            <button @onclick="() => ToggleDelete(task)" class="btn btn-outline-danger oi oi-trash" style="height: 40px; width: 40px"></button>
                            @if (expandedTasks.Any(x => x == task.Id))
                            {
                                <button @onclick="() => ToggleCreate(task)" class="btn btn-success oi oi-plus" style="height: 40px; width: 40px"></button>
                            }
                        </div>
                    </div>
                </Virtualize>
            </div>
        }
    </div>
}

<style>
    .task {
        background-color: darkslategray;
        opacity: 0.8;
        -webkit-transition: background-color 0.2s ease-in-out;
        -moz-transition: background-color 0.2s ease-in-out;
        transition: background-color 0.2s ease-in-out;
    }

        .task:hover {
            background-color: rgb(50, 100, 100);
        }

    li::marker {
        content: "- ";
        font-size: 1.2em;
    }

</style>

@code {
    [Parameter]
    public List<TaskModel> Tasks { get; set; }
    [Parameter]
    public UserModel User { get; set; }

    private TaskModel tempTask { get; set; } = new()
        {
            Id = Guid.Empty
        };
    private List<Guid> expandedTasks = new();
    private string editErrorMessage = "";
    private bool confirmDeleteTask = false;
    private bool confirmEditTask = false;
    private bool confirmCreateSubTask = false;
    private bool expandButton = false;

    public void ToggleDelete(TaskModel task)
    {
        if (tempTask.Id != task.Id)
        {
            tempTask.Id = task.Id;
            confirmEditTask = false;
            confirmDeleteTask = true;
            confirmCreateSubTask = false;
            return;
        }

        confirmDeleteTask = !confirmDeleteTask;
        confirmEditTask = false;
        confirmCreateSubTask = false;
        tempTask.Id = task.Id;
    }

    public void ToggleEdit(TaskModel task)
    {
        if (!confirmEditTask)
        {
            tempTask.Priority = task.Priority;
            tempTask.Title = task.Title;
            tempTask.Description = task.Description;
        }
        else if (confirmEditTask && tempTask.Id == task.Id)
        {
            task.Priority = tempTask.Priority;
            task.Title = tempTask.Title;
            task.Description = tempTask.Description;
        }

        if (tempTask.Id != task.Id)
        {
            tempTask.Id = task.Id;
            confirmDeleteTask = false;
            confirmEditTask = true;
            confirmCreateSubTask = false;
            return;
        }

        confirmEditTask = !confirmEditTask;
        confirmDeleteTask = false;
        confirmCreateSubTask = false;
        editErrorMessage = "";
        tempTask.Id = task.Id;
    }

    public void ToggleCreate(TaskModel task)
    {
        if (tempTask.Id != task.Id)
        {
            tempTask.Id = task.Id;
            confirmEditTask = false;
            confirmDeleteTask = false;
            confirmCreateSubTask = true;
            return;
        }

        confirmCreateSubTask = !confirmCreateSubTask;
        confirmEditTask = false;
        confirmDeleteTask = false;
        tempTask.Id = task.Id;
    }

    public async void ToggleExpandTask(TaskModel task)
    {
        if (expandedTasks.Any(x => x == task.Id))
        {
            expandedTasks.Remove(task.Id);
        }
        else
        {
            await taskService.GetTask(task.Id);
            expandedTasks.Add(task.Id);
        }

        expandButton = true;
        StateHasChanged();
    }

    public async void ToggleComplete(TaskModel task)
    {
        await taskService.ToggleComplete(task);
        Tasks = await taskService.GetTasks();
        StateHasChanged();
    }

    public bool CheckOpacity(TaskModel task)
    {
        if (!task.Completed)
        {
            return false;
        }
        else if (task.Completed && (task.Id == tempTask.Id && (confirmDeleteTask || confirmEditTask || confirmCreateSubTask)))
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public void GoToTask(TaskModel task)
    {
        if ((confirmDeleteTask || confirmEditTask) && tempTask.Id == task.Id)
        {
            return;
        }
        else if (expandButton)
        {
            expandButton = false;
            return;
        }

        CurrentActive.Id["TaskId"] = task.Id;
        navigationManager.NavigateTo("/task", true);
    }

    public async Task Delete(TaskModel task)
    {
        try
        {
            await taskService.DeleteTask(task);
            Tasks.Remove(task);
            confirmDeleteTask = false;
        }
        catch (Exception)
        {
            return;
        }
    }

    public async Task Edit(TaskModel task)
    {
        try
        {
            await taskService.EditTask(task);
            Tasks = await taskService.GetTasks();
            confirmEditTask = false;
            editErrorMessage = "";
        }
        catch (Exception)
        {
            editErrorMessage = "Task already exists with this name.";
            return;
        }
    }

    protected async Task SubTaskCreated(TaskModel task)
    {
        confirmCreateSubTask = false;
        task.SubTasks = await subTaskService.GetSubTasks();
    }

    public async Task DeleteSubTask(SubTaskModel subTask)
    {
        try
        {
            await subTaskService.DeleteSubTask(subTask);
            Tasks = await taskService.GetTasks();
        }
        catch (Exception)
        {
            return;
        }
    }
}
