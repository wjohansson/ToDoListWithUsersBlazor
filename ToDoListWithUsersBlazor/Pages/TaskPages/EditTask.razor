@page "/edit-task"

@inject TaskServiceUi taskService
@using System.Text;
@using System.Text.Json;
@using DataLibrary.Enums;
@using DataLibrary.Models;
@using ToDoListWithUsersBlazor.Services;
@inject NavigationManager navigationManager

<h3>Edit Task</h3>

@if (ThisTask != null)
{
    <p class="text-danger">@ErrorMessage</p>
    <EditForm Model="@ThisTask" OnValidSubmit="@Edit">
        <DataAnnotationsValidator />
        <div class="form-group row">
            <div class="form-group col">
                <label for="title">Title</label>
                <InputText id="title" @bind-Value="ThisTask.Title" class="form-control" />
                <ValidationMessage For="@(() => ThisTask.Title)" />
            </div>

            <div class="form-group col">
                <label for="description">Description</label>
                <InputText id="description" @bind-Value="ThisTask.Description" class="form-control" />
                <ValidationMessage For="@(() => ThisTask.Description)" />
            </div>
        </div>

        <br />

        <div class="form-group row">
            <div class="form-group col">
                <label for="priority">Priority</label>
                <InputSelect id="priority" @bind-Value="ThisTask.Priority" class="form-control">
                    <option value=""></option>
                    @foreach (var sort in Enum.GetValues(typeof(Priority)))
                    {
                        <option value="@sort">@sort</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => ThisTask.Priority)" />
            </div>
        </div>

        <br />

        <div class="form-group row">
            <div class="form-group col">
                <button type="submit" class="btn btn-warning">Edit Task</button>
                <button type="reset" @onclick="@(() => navigationManager.NavigateTo("/"))" @onclick:preventDefault class="btn btn-secondary">Cancel</button>
            </div>
        </div>
    </EditForm>
}

@code {
    public TaskModel? ThisTask { get; set; }
    public string ErrorMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ThisTask = await taskService.GetTask(CurrentActive.Id["TaskId"]);
        }
        catch (Exception)
        {
            ThisTask = null;
        }
    }

    public async Task Edit()
    {
        try
        {
            await taskService.EditTask(ThisTask);
        }
        catch (Exception)
        {
            ErrorMessage = "List already has a task with this name.";
            return;
        }
        navigationManager.NavigateTo("/list");
    }

}
