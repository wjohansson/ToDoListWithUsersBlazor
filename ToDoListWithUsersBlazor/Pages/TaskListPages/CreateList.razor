@page "/create-list"

@inject TaskListServiceUi listService
@inject CategoryServiceUi categoryService
@inject UserServiceUi userService
@using System.Text;
@using System.Text.Json;
@using DataLibrary.Models;
@using ToDoListWithUsersBlazor.Pages.UserPages;
@using ToDoListWithUsersBlazor.Services;
@inject NavigationManager navigationManager;

<div class="d-flex justify-content-between">
    <h3 class="text-white">Create a new list</h3>
</div>

<p class="text-danger">@errorMessage</p>
<EditForm Model="@taskList" OnValidSubmit="@Create" class="w-100">
    <DataAnnotationsValidator />
    <div class="d-flex flex-column">
        <div class="form-group row d-flex">
            <div class="form-group col">
                <InputText placeholder="Title..." id="title" @bind-Value="taskList.Title" class="form-control" />
                <ValidationMessage For="@(() => taskList.Title)" />
            </div>

            <div class="form-group col">
                <InputSelect id="category" @bind-Value="taskList.CategoryId" class="form-control">
                    @if (User != null)
                    {
                        <option value="@User.Categories.First(x => x.Title == "No category")" class="text-opacity-75">No category</option>
                        @foreach (CategoryModel category in User.Categories)
                        {
                            @if (category.Title != "No category")
                            {
                                <option value="@category.Id">@category.Title</option>
                            }
                        }
                    }
                </InputSelect>
            </div>

        </div>

        <div class="form-group row mt-3">
            <div class="form-group col d-flex gap-2 justify-content-between">
                <div>
                    <button type="submit" class="btn btn-success oi oi-plus" style="height: 40px; width: 40px"></button>
                    <button type="reset" class="btn btn-outline-danger oi oi-trash" style="height: 40px; width: 40px"></button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback<List<TaskListModel>> OnListCreated { get; set; }

    [Parameter]
    public UserModel? User { get; set; }

    private TaskListModel taskList = new();
    private string categoryTitle = "";
    private string errorMessage = "";

    public async Task Create()
    {
        try
        {
            await listService.CreateList(taskList);

            taskList = new TaskListModel();
            categoryTitle = "";
            errorMessage = "";
        }
        catch (Exception)
        {
            errorMessage = "User already has a list with this name";
            return;
        }
        await OnListCreated.InvokeAsync();
    }

}
