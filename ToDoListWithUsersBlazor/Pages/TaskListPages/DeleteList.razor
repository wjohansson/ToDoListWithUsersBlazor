@page "/delete-list"

@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

@using DataLibrary.Models;
@using ToDoListWithUsersBlazor.Services;
@inject TaskListServiceUi listService;
@inject NavigationManager navigationManager;

<div class="toast-container p-3 @showClass" data-bs-autohide="true" data-bs-delay="5000">
    @if (List != null)
    {

        <h3>Are you sure you want to delete this list?</h3>

        <div class="p-2 m-2 w-25 border-5 bg-opacity-25 rounded-3 hover d-flex flex-column flex-wrap justify-content-between" style="height: 200px; ">
            <div>
                <h3 class="text-center">@List.Title</h3>

                @if (List.Tasks.Count == 0)
                {
                    <ul>
                        <li>No tasks</li>
                    </ul>
                }
                else
                {
                    <ul>
                        @foreach (TaskModel task in List.Tasks)
                        {
                            <li>@task.Title</li>
                        }
                    </ul>
                }
            </div>
        </div>

        <p class="text-danger">@ErrorMessage</p>

        <button @onclick="Delete" class="btn btn-warning">Delete list</button>
        <button type="reset" @onclick="@(() => navigationManager.NavigateTo("/"))" @onclick:preventDefault class="btn btn-secondary">Cancel</button>
    }
</div>

<style>
    .hover {
        background-color: yellow;
        opacity: 0.8;
        -webkit-transition: background-color 0.2s ease-in-out;
        -moz-transition: background-color 0.2s ease-in-out;
        transition: background-color 0.2s ease-in-out;
    }

        .hover:hover {
            background-color: gold;
            border: firebrick;
            cursor: pointer;
        }

</style>

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    public TaskListModel? List { get; set; }
    public string ErrorMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            List = await listService.GetList(CurrentActive.Id["ListId"]);
        }
        catch (Exception)
        {
            List = null;
        }
    }

    public void Show()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public async Task Delete()
    {
        try
        {

            await listService.DeleteList(List);

        }
        catch (Exception)
        {
            ErrorMessage = "Something went wrong with deleting the list.";
            return;
        }
        navigationManager.NavigateTo("/", true);
    }
}
