@page "/task"

@using DataLibrary.Enums;
@using DataLibrary.Models;
@using ToDoListWithUsersBlazor.Pages.SubTaskPages
@using ToDoListWithUsersBlazor.Services;
@inject TaskListServiceUi listService;
@inject TaskServiceUi taskService;
@inject SubTaskServiceUi subTaskService;
@inject NavigationManager navigationManager;

@if (ThisTask != null || SubTasks != null || List != null)
{
    <div class="w-100 d-flex flex-column">
        <p class="text-center text-decoration-underline mb-0">Prio: @ThisTask.Priority</p>
        <h3 class="text-center">Task: @ThisTask.Title</h3>
        <div class="p-2 my-2 w-50 rounded-3 d-flex flex-column flex-wrap justify-content-between text-white align-self-center" style="background-color: rgb(70, 20, 0)">
            <CreateSubTask OnSubTaskCreated="@SubTaskCreated"></CreateSubTask>
            <hr class="opacity-75 bg-warning rounded-pill" />
            <SortTaskSubTasks ThisTask="@ThisTask" OnSortChanged="@SortChanged"></SortTaskSubTasks>
            <hr class="opacity-75 bg-warning rounded-pill" />
            <TaskSubTasks SubTasks="@SubTasks" Task="@ThisTask"></TaskSubTasks>
        </div>
    </div>
}

@code {
    public TaskModel? ThisTask { get; set; }
    public List<SubTaskModel>? SubTasks { get; set; }
    public TaskListModel? List { get; set; }
    public string ErrorMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ThisTask = await taskService.GetTask(CurrentActive.Id["TaskId"]);
            List = await listService.GetList(CurrentActive.Id["ListId"]);
            SubTasks = await subTaskService.GetSubTasks();
        }
        catch (Exception)
        {
            ThisTask = null;
        }
    }

    protected async Task SubTaskCreated()
    {
        SubTasks = await subTaskService.GetSubTasks();
    }

    protected async Task SortChanged()
    {
        SubTasks = await subTaskService.GetSubTasks();
    }
}
