@using DataLibrary.Enums;
@using DataLibrary.Models;
@using ToDoListWithUsersBlazor.Pages.CategoryPages
@using ToDoListWithUsersBlazor.Pages.TaskListPages
@using ToDoListWithUsersBlazor.Services;
@inject UserServiceUi userService
@inject TaskListServiceUi listService
@inject CategoryServiceUi categoryService
@inject TaskServiceUi taskService
@inject NavigationManager navigationManager

@if (taskLists != null && categories != null)
{
    <div class="w-100 d-flex gap-2">
        <div class="p-2 w-50 rounded-3 d-flex flex-column justify-content-between" style="background-color: darkslategray; height: 630px;">
            <SortUserLists User="@User" OnSortChanged="@SortChanged"></SortUserLists>

            <div class="rounded-3 p-2 my-2 overflow-scroll h-100" style="background-color: rgb(70, 120, 120); scrollbar-width: none">
                <UserLists TaskLists="@taskLists" User="@User" TaskList="@taskList" OnGoToList="@ToggleList" OnDeleteActiveList="@ToggleList"></UserLists>
            </div>
            <div>
                <button @onclick="@ToggleCreateList" class="btn btn-outline-warning">Create list</button>
                <button @onclick="@ToggleManageCategories" class="btn btn-outline-warning">Manage Categories</button>
            </div>

        </div>
        <div class="p-2 w-50 rounded-3 d-flex flex-column overflow-scroll" style="background-color: rgb(100, 50, 50); scrollbar-width:none; height: 630px;">

            @if (createList)
            {
                <CreateList OnListCreated="@ListCreated" User="@User"></CreateList>
            }
            else if (manageCategories)
            {
                <ManageCategories Categories="@categories"></ManageCategories>
            }
            else if (taskList != null)
            {
                <CurrentList Tasks="@tasks" ThisList="@taskList" User="@User"></CurrentList>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public UserModel? User { get; set; }

    private List<TaskListModel>? taskLists;
    private TaskListModel? taskList = null;
    private List<CategoryModel>? categories;
    private bool createList;
    private bool manageCategories;
    private List<TaskModel>? tasks;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            taskLists = await listService.GetLists();
            categories = await categoryService.GetCategories();
        }
        catch (Exception)
        {
            User = null;
        }
    }

    public void ToggleCreateList()
    {
        createList = !createList;
        manageCategories = false;
        taskList = null;
        CurrentActive.Id["ListId"] = Guid.Empty;
        StateHasChanged();
    }

    public void ToggleManageCategories()
    {
        manageCategories = !manageCategories;
        createList = false;
        taskList = null;
        CurrentActive.Id["ListId"] = Guid.Empty;
        StateHasChanged();
    }

    public async void ToggleList()
    {
        if (taskList?.Id == CurrentActive.Id["ListId"])
        {
            taskList = null;
            CurrentActive.Id["ListId"] = Guid.Empty;
            taskLists = await listService.GetLists();
            tasks = await taskService.GetTasks();
            StateHasChanged();
            return;
        }

        taskList = await listService.GetList(CurrentActive.Id["ListId"]);
        tasks = await taskService.GetTasks();
        manageCategories = false;
        createList = false;
        StateHasChanged();
    }

    protected async Task ListCreated()
    {
        taskLists = await listService.GetLists();
        createList = false;
    }

    protected async Task SortChanged()
    {
        taskLists = await listService.GetLists();
    }
}
