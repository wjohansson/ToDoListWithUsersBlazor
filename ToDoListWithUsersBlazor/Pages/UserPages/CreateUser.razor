@page "/signup"

@inject UserServiceUi userService
@using System.Text;
@using System.Text.Json;
@using DataLibrary.Models;
@using ToDoListWithUsersBlazor.Services;
@inject NavigationManager navigationManager

<div class="d-flex w-100 justify-content-center">
    <div class="d-flex flex-column gap-4 w-50 p-4 rounded-3" style="background-color: rgb(200, 200, 200)">
        <h3 class="text-center">Create User</h3>

        <p class="text-danger">@errorMessage</p>
        <EditForm Model="@userModel" OnValidSubmit="@Create">
            <DataAnnotationsValidator />
            <div class="form-group row">
                <div class="form-group col">
                    <label for="username">Username</label>
                    <InputText id="username" @bind-Value="userModel.Username" DisplayName="Username" class="form-control" />
                    <ValidationMessage For="@(() => userModel.Username)" />
                </div>
                <div class="form-group col">
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="userModel.Email" class="form-control" />
                    <ValidationMessage For="@(() => userModel.Email)" />
                </div>
            </div>

            <br />

            <div class="form-group row">
                <div class="form-group col">
                    <label for="password">Password</label>
                    <InputText type="password" id="password" @bind-Value="userModel.Password" class="form-control" />
                    <ValidationMessage For="@(() => userModel.Password)" />
                </div>
                <div class="form-group col">
                    <label for="passwordConfirm">Confirm Password</label>
                    <InputText type="password" id="passwordConfirm" @bind-Value="userModel.ConfirmPassword" class="form-control" />
                    <ValidationMessage For="@(() => userModel.ConfirmPassword)" />
                </div>
            </div>

            <br />

            <div class="form-group row">
                <div class="form-group col">
                    <label for="firstName">First Name</label>
                    <InputText id="firstName" @bind-Value="userModel.FirstName" class="form-control" />
                    <ValidationMessage For="@(() => userModel.FirstName)" />
                </div>
                <div class="form-group col">
                    <label for="lastName">Last Name</label>
                    <InputText id="lastName" @bind-Value="userModel.LastName" class="form-control" />
                    <ValidationMessage For="@(() => userModel.LastName)" />
                </div>
            </div>

            <br />

            <div class="form-group row">
                <div class="form-group col">
                    <label for="age">Age</label>
                    <InputNumber id="age" @bind-Value="userModel.Age" class="form-control" />
                    <ValidationMessage For="@(() => userModel.Age)" />
                </div>
            </div>

            <br />

            <div class="form-group row">
                <div class="form-group col">
                    <label>Gender</label>
                    <InputText id="gender" @bind-Value="userModel.Gender" class="form-control" />
                    <ValidationMessage For="@(() => userModel.Gender)" />
                </div>
                <div class="form-group col">
                    <label for="adress">Adress</label>
                    <InputText id="adress" @bind-Value="userModel.Adress" class="form-control" />
                    <ValidationMessage For="@(() => userModel.Adress)" />
                </div>
            </div>

            <br />

            <div class="form-group row">
                <div class="form-group col d-flex justify-content-center gap-2">
                    <button type="submit" class="btn btn-warning" style="width: 150px;">Create User</button>
                    <button type="reset" @onclick="@(() => navigationManager.NavigateTo("/"))" @onclick:preventDefault class="btn btn-secondary" style="width: 150px;">Cancel</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>






@code {
    private UserModel userModel = new();
    private UserModel? loggedInUser;
    private string errorMessage = "";

    public async Task Create()
    {
        try
        {
            await userService.CreateUser(userModel);
        }
        catch (Exception)
        {
            errorMessage = "User already exists.";
            return;
        }
        navigationManager.NavigateTo("/", true);
    }
}
