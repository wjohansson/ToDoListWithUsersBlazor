@page "/change-password"

@using DataLibrary.Enums;
@using DataLibrary.Models;
@using ToDoListWithUsersBlazor.Services;
@inject UserServiceUi userService;
@inject NavigationManager navigationManager;

@if (User != null)
{
    <div class="d-flex w-100 justify-content-center">
        <div class="d-flex flex-column gap-4 w-50 p-4 rounded-3" style="background-color: rgb(200, 200, 200)">
            <h3>Change Password for user '@User.Username'</h3>

            <p class="text-danger">@ErrorMessage</p>
            <EditForm Model="@User" OnValidSubmit="@EditPassword">
                <DataAnnotationsValidator />
                <div class="form-group row">
                    <div class="form-group col d-flex gap-2 align-items-center">
                        <InputText type="@textType" placeholder="Old password..." id="oldPassword" @bind-Value="User.OldPassword" class="form-control" />
                        <span class="btn btn-lg oi oi-eye" @onclick="@ToggleTextType"></span>
                    </div>
                </div>

                <br />

                <div class="form-group row">
                    <div class="form-group col d-flex gap-2 align-items-center">
                        <div>
                            <InputText type="@textTypeNew" placeholder="New password..." id="firstName" @bind-Value="User.Password" class="form-control" />
                            <ValidationMessage For="@(() => User.Password)" />
                        </div>
                        <span class="btn btn-lg oi oi-eye align-self-start" @onclick="@ToggleTextTypeNew"></span>
                    </div>
                    <div class="form-group col">
                        <InputText type="password" placeholder="Confirm new password..." id="confirmPassword" @bind-Value="User.ConfirmPassword" class="form-control" />
                        <ValidationMessage For="@(() => User.ConfirmPassword)" />
                    </div>
                </div>

                <br />

                <div class="form-group row">
                    <div class="form-group col">
                        <button class="btn btn-warning">Change Password</button>
                        <button type="reset" @onclick="@(() => navigationManager.NavigateTo("/settings"))" @onclick:preventDefault class="btn btn-secondary">Cancel</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    public UserModel? User { get; set; } = new();
    public string NewPassword { get; set; } = "";
    public string ErrorMessage { get; set; } = "";
    private string textType = "password";
    private string textTypeNew = "password";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            User = await userService.GetUser();
            User.Password = "";
        }
        catch (Exception)
        {
            User = null;
        }
    }

    public async Task EditPassword()
    {
        if (User.Permission == PermissionLevel.System)
        {
            ErrorMessage = "Can not change system user.";
            return;
        }
        await userService.ChangePassword(User);
        navigationManager.NavigateTo("/settings", true);
    }

    public void ToggleTextType()
    {
        textType = textType == "password" ? "text" : "password";
    }

    public void ToggleTextTypeNew()
    {
        textTypeNew = textTypeNew == "password" ? "text" : "password";
    }
}
