@page "/edit-list"

@inject TaskListServiceUi listService
@inject CategoryServiceUi categoryService
@using System.Text;
@using System.Text.Json;
@using DataLibrary.Models;
@using ToDoListWithUsersBlazor.Services;
@inject NavigationManager navigationManager

<h3>Edit List</h3>

@if (TaskList != null)
{
    <p class="text-danger">@ErrorMessage</p>
    <EditForm Model="@TaskList" OnValidSubmit="@Edit">
        <DataAnnotationsValidator />
        <div class="form-group row">
            <div class="form-group col">
                <label for="title">Title</label>
                <InputText id="title" @bind-Value="TaskList.Title" class="form-control" />
                <ValidationMessage For="@(() => TaskList.Title)" />
            </div>

            <div class="form-group col">
                <label for="category">Category</label>
                <InputSelect id="category" @bind-Value="CategoryTitle" class="form-control">
                    @if (Categories != null)
                    {
                        @foreach (CategoryModel category in Categories)
                        {
                            <option value="@category.Title">@category.Title</option>

                        }
                    }
                </InputSelect>
            </div>

        </div>

        <br />

        <div class="form-group row">
            <div class="form-group col">
                <button type="submit" class="btn btn-warning">Edit List</button>
                <button type="reset" @onclick="@(() => navigationManager.NavigateTo("/"))" @onclick:preventDefault class="btn btn-secondary">Cancel</button>
            </div>
        </div>
    </EditForm>
}

@code {
    public TaskListModel TaskList { get; set; }
    public List<CategoryModel>? Categories { get; set; }
    public string CategoryTitle { get; set; } = "";
    public string ErrorMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Categories = await categoryService.GetCategories();
            TaskList = await listService.GetList(CurrentActive.Id["ListId"]);
        }
        catch (Exception)
        {
            Categories = null;
        }
    }

    public async Task Edit()
    {
        try
        {
            await listService.EditList(TaskList);
        }
        catch (Exception)
        {
            ErrorMessage = "User already has a list with this name.";
            return;
        }
        navigationManager.NavigateTo("/");
    }

    
}
