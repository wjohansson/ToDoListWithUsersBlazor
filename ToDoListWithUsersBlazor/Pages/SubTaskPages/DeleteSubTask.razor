@page "/delete-sub-task"

@using DataLibrary.Models;
@using ToDoListWithUsersBlazor.Services;
@inject SubTaskServiceUi subTaskService;
@inject NavigationManager navigationManager;

@if (ThisSubTask != null)
{

    <h3>Are you sure you want to delete this sub task?</h3>

    <div class="p-2 m-2 w-25 border-5 bg-opacity-25 rounded-3 hover d-flex flex-column flex-wrap justify-content-between" style="height: 200px; ">
        <div>
            <h3 class="text-center">@ThisSubTask.Title</h3>

            <ul>
                <li>@ThisSubTask.Description</li>
            </ul>
        </div>
    </div>

    <p class="text-danger">@ErrorMessage</p>

    <button @onclick="Delete" class="btn btn-warning">Delete sub task</button>
    <button type="reset" @onclick="@(() => navigationManager.NavigateTo("/task"))" @onclick:preventDefault class="btn btn-secondary">Cancel</button>
}

<style>
    .hover {
        background-color: yellow;
        opacity: 0.8;
        -webkit-transition: background-color 0.2s ease-in-out;
        -moz-transition: background-color 0.2s ease-in-out;
        transition: background-color 0.2s ease-in-out;
    }

        .hover:hover {
            background-color: gold;
            border: firebrick;
            cursor: pointer;
        }

</style>

@code {
    public SubTaskModel? ThisSubTask { get; set; }
    public string ErrorMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ThisSubTask = await subTaskService.GetSubTask(CurrentActive.Id["SubTaskId"]);
        }
        catch (Exception)
        {
            ThisSubTask = null;
        }
    }

    public async Task Delete()
    {
        try
        {

            await subTaskService.DeleteSubTask(ThisSubTask);

        }
        catch (Exception)
        {
            ErrorMessage = "Something went wrong with deleting the sub task.";
            return;
        }
        navigationManager.NavigateTo("/task", true);
    }
}
