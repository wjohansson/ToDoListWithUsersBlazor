@using DataLibrary.Enums;
@using DataLibrary.Models;
@using ToDoListWithUsersBlazor.Services;
@inject UserServiceUi userService
@inject TaskListServiceUi listService
@inject CategoryServiceUi categoryService
@inject NavigationManager navigationManager

<div class="d-flex flex-wrap flex-column">
    <Virtualize Context="category" Items="@User.Categories">
        @if (TaskLists.Any(x => x.CategoryId == category?.Id))
        {
            <h4 class="text-white text-capitalize mt-3">@category?.Title</h4>

            <hr class="bg-white my-0" />

            <div class="d-flex flex-wrap">
                <Virtualize Context="taskList" Items="@TaskLists">
                    @if (taskList?.CategoryId == category?.Id)
                    {
                        <div class="d-flex flex-column w-50">
                            <div @onpointerdown="@(() => GetList(taskList))" class="p-2 m-2 border-5 bg-opacity-25 rounded-3 @(taskList.Id == CurrentActive.Id["ListId"] ? "activelist" : "list") list d-flex flex-column flex-wrap justify-content-between overflow-auto" style="height: 130px; scrollbar-width: none;">
                                <div>
                                    @if ((!confirmEditList && !confirmDeleteList) || taskList.Id != tempList.Id)
                                    {
                                        <div class="text-center mb-0">@taskList?.Title</div>
                                        <hr class="bg-black mx-2 my-1 @(taskList.Id == CurrentActive.Id["ListId"] ? "bg-white" : "bg-black")" />

                                        <ul class="d-flex flex-column gap-2 list-group">
                                            <Virtualize Context="task" Items="@taskList?.Tasks">
                                                <li class="form-check d-flex justify-content-between align-items-center px-2 rounded-3 text-white @(task.Completed ? "opacity-50" : "")" style="background-color: darkslategray">
                                                    @task.Title
                                                    @if (task.Completed)
                                                    {
                                                        <span class="oi oi-check text-black" style="height: 16px;"></span>
                                                    }
                                                </li>
                                            </Virtualize>
                                        </ul>
                                    }
                                    else if (taskList.Id == tempList.Id && confirmDeleteList)
                                    {
                                        <div class="text-center mb-0">Are you sure?</div>
                                        <hr class="bg-black mx-2 my-1" />
                                        <button @onclick="() => Delete(taskList)" class="btn btn-outline-success oi oi-check" style="height: 30px; width: calc(50% - 4px)"></button>
                                        <button type="reset" @onclick="() => ToggleDelete(taskList)" @onclick:preventDefault class="btn btn-outline-danger oi oi-x" style="height: 30px; width: calc(50% - 4px)"></button>
                                    }
                                    else if (taskList.Id == tempList.Id && confirmEditList)
                                    {
                                        <p class="text-danger">@editErrorMessage</p>
                                        <EditForm Model="taskList" OnValidSubmit="() => Edit(taskList)">
                                            <DataAnnotationsValidator />
                                            <div class="form-group row">
                                                <div class="form-group col">
                                                    <label for="title">Title</label>
                                                    <InputText id="title" @bind-Value="taskList.Title" class="form-control" />
                                                    <ValidationMessage For="@(() => taskList.Title)" />
                                                </div>

                                                <div class="form-group col">
                                                    <label for="category">Category</label>
                                                    <InputSelect id="category" @bind-Value="taskList.CategoryId" @onpointerdown="@(() => shouldRender = false)" class="form-control">
                                                        @if (User != null)
                                                        {
                                                            <option value="@User.Categories.First(x => x.Title == "No category").Id">No category</option>
                                                            @foreach (CategoryModel category in User.Categories)
                                                            {
                                                                @if (category.Title != "No category")
                                                                {
                                                                    <option value="@category.Id">@category.Title</option>
                                                                }
                                                            }
                                                        }
                                                    </InputSelect>
                                                    <ValidationMessage For="@(() => taskList.CategoryId)" />
                                                </div>
                                            </div>

                                            <div class="form-group row mt-2">
                                                <div class="form-group col">
                                                    <button type="submit" class="btn btn-outline-success oi oi-pencil" style="height: 30px; width: calc(50% - 4px)"></button>
                                                    <button type="reset" @onclick="() => ToggleEdit(taskList)" @onclick:preventDefault class="btn btn-outline-danger oi oi-x" style="height: 30px; width: calc(50% - 4px)"></button>
                                                </div>
                                            </div>

                                            <br />
                                        </EditForm>
                                    }
                                </div>
                            </div>

                            <div class="gap-2 mb-4 d-flex justify-content-center">
                                <button @onpointerup="() => ToggleEdit(taskList)" class="btn btn-secondary oi oi-pencil" style="height: 30px; width: calc(50% - 12px)"></button>
                                <button @onclick="() => ToggleDelete(taskList)" class="btn btn-outline-danger oi oi-trash" style="height: 30px; width: calc(50% - 12px)"></button>
                            </div>

                            <br />
                        </div>
                    }
                </Virtualize>
            </div>
        }
    </Virtualize>
</div>

<style>
    .list {
        background-color: rgb(255, 255, 50);
        opacity: 0.8;
        -webkit-transition: background-color 0.2s ease-in-out;
        -moz-transition: background-color 0.2s ease-in-out;
        transition: background-color 0.2s ease-in-out;
    }

    .list:hover {
        background-color: rgb(255, 200, 50);
        cursor: pointer;
    }
    
    .activelist {
        background-color: rgb(100, 50, 50);
        color: white;
        opacity: 0.8;
        -webkit-transition: background-color 0.2s ease-in-out;
        -moz-transition: background-color 0.2s ease-in-out;
        transition: background-color 0.2s ease-in-out;
    }

    .activelist:hover {
        background-color: rgb(150, 50, 50);
        cursor: pointer;
    }

</style>

@code {
    [Parameter]
    public List<TaskListModel> TaskLists { get; set; }

    [Parameter]
    public UserModel User { get; set; }

    [Parameter]
    public TaskListModel TaskList { get; set; }

    [Parameter]
    public EventCallback<TaskListModel> OnGoToList { get; set; }

    [Parameter]
    public EventCallback<TaskListModel> OnDeleteActiveList { get; set; }

    private TaskListModel tempList = new();
    private string editErrorMessage = "";
    private bool confirmDeleteList = false;
    private bool confirmEditList = false;
    private bool shouldRender = true;

    protected override bool ShouldRender()
    {
        return shouldRender;
    }

    public void ToggleDelete(TaskListModel taskList)
    {
        if (tempList.Id != taskList.Id)
        {   
            tempList.Id = taskList.Id;
            confirmEditList = false;
            confirmDeleteList = true;
            return;
        }

        tempList.Id = taskList.Id;
        confirmDeleteList = !confirmDeleteList;
        confirmEditList = false;
    }

    public void ToggleEdit(TaskListModel taskList)
    {
        shouldRender = true;

        if (!confirmEditList)
        {
            tempList.CategoryId = taskList.CategoryId;
            tempList.Title = taskList.Title;
        }
        else if (confirmEditList && tempList.Id == taskList.Id)
        {
            taskList.CategoryId = tempList.CategoryId;
            taskList.Title = tempList.Title;
        }
        else if (confirmEditList && tempList.Id != taskList.Id)
        {
            tempList.CategoryId = taskList.CategoryId;
            tempList.Title = taskList.Title;
        }

        if (tempList.Id != taskList.Id)
        {
            tempList.Id = taskList.Id;
            confirmDeleteList = false;
            confirmEditList = true;
            return;
        }

        tempList.Id = taskList.Id;
        confirmEditList = !confirmEditList;
        confirmDeleteList = false;
        editErrorMessage = "";
    }

    public async void GetList(TaskListModel taskList)
    {
        if ((confirmDeleteList || confirmEditList) && tempList.Id == taskList.Id)
        {
            return;
        }

        CurrentActive.Id["ListId"] = taskList.Id;
        await OnGoToList.InvokeAsync();
    }

    public async Task Delete(TaskListModel taskList)
    {
        try
        {
            await listService.DeleteList(taskList);
            TaskLists.Remove(taskList);
            confirmDeleteList = false;

            if (CurrentActive.Id["ListId"] == taskList.Id)
            {
                await OnDeleteActiveList.InvokeAsync();
            }
        }
        catch (Exception)
        {
            return;
        }
    }

    public async Task Edit(TaskListModel taskList)
    {
        Guid? currentCategoryId = Guid.Empty;
        try
        {
            shouldRender = false;
            await listService.EditList(taskList);
            TaskLists = await listService.GetLists();
            confirmEditList = false;
            editErrorMessage = "";
            shouldRender = true;
        }
        catch (Exception)
        {
            editErrorMessage = "User already has a list with this name.";
            taskList.CategoryId = tempList.CategoryId;
            shouldRender = true;
            return;
        }
    }
}
